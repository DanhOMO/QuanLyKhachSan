/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.quanlykhachsan.view;

import com.formdev.flatlaf.FlatLightLaf;
import com.quanlykhachsan.main.Main;
import com.quanlykhachsan.model.ConnectDB;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.UIManager;

/**
 *
 * @author liemh
 */
public class DangNhap_GUI extends javax.swing.JFrame {

    /**
     * Creates new form DangNhap_GUI
     */
    private Color color1; // Màu đầu tiên
    private Color color2; // Màu thứ hai
    
    public DangNhap_GUI(Color color1, Color color2) {
        this.color1 = color1;
        this.color2 = color2;
    }
    protected void paintComponent(Graphics g) {
        
        Graphics2D g2d = (Graphics2D) g;
        
        // Tạo GradientPaint từ màu color1 đến color2
        GradientPaint gradient = new GradientPaint(0, 0, color1, getWidth(), getHeight(), color2);
        g2d.setPaint(gradient);
        
        // Vẽ hình chữ nhật phủ toàn bộ JPanel
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }
    
    public DangNhap_GUI() {
        initComponents();
        setLocationRelativeTo(null);
        updateDefaultPassword();
        txtTenDangNhap.addKeyListener(new KeyAdapter() {
    @Override
    public void keyPressed(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_ENTER) {
            btnDangNhapActionPerformed(new ActionEvent(btnDangNhap, ActionEvent.ACTION_PERFORMED, null));
        }
    }
});

txtMatKhau.addKeyListener(new KeyAdapter() {
    @Override
    public void keyPressed(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_ENTER) {
            btnDangNhapActionPerformed(new ActionEvent(btnDangNhap, ActionEvent.ACTION_PERFORMED, null));
        }
    }
});

    }
     private String hashPassword(String password) {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] encodedHash = digest.digest(password.getBytes());
            StringBuilder hexString = new StringBuilder(2 * encodedHash.length);
            for (byte b : encodedHash) {
                String hex = Integer.toHexString(0xff & b);
                if (hex.length() == 1) hexString.append('0');
                hexString.append(hex);
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException("Lỗi khi mã hóa mật khẩu: " + e.getMessage());
        }
    }
    public void updateDefaultPassword() {
    String defaultPassword = txtMatKhau.getText();
    String hashedDefaultPassword = hashPassword(defaultPassword); // Mã hóa mật khẩu "123"
    
    try {
        ConnectDB.getInstance().connect();
        Connection con = ConnectDB.getInstance().getConnection();
        
        // Cập nhật tất cả tài khoản có mật khẩu "123" thành mật khẩu đã mã hóa
        String sql = "UPDATE TaiKhoan SET matKhau = ? WHERE matKhau = ?";
        PreparedStatement pstmt = con.prepareStatement(sql);
        pstmt.setString(1, hashedDefaultPassword); // Mật khẩu mã hóa
        pstmt.setString(2, defaultPassword); // Điều kiện là mật khẩu hiện tại là "123"
        
        pstmt.executeUpdate();
       
        
    } catch (SQLException e) {
        e.printStackTrace();
    }
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        btnDangNhap = new javax.swing.JButton();
        jFoget = new javax.swing.JLabel();
        txtTenDangNhap = new javax.swing.JTextField();
        txtMatKhau = new javax.swing.JPasswordField();
        checkRemember = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 204, 255));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setBackground(new java.awt.Color(0, 0, 0));
        jLabel4.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel4.setText("Mật khẩu");
        jLabel4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(255, 250, 230), new java.awt.Color(204, 255, 255), new java.awt.Color(26, 26, 26), new java.awt.Color(51, 77, 51)));
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 200, -1, -1));

        btnDangNhap.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnDangNhap.setText("Đăng nhập");
        btnDangNhap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDangNhapActionPerformed(evt);
            }
        });
        getContentPane().add(btnDangNhap, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 300, -1, -1));

        jFoget.setBackground(new java.awt.Color(255, 51, 51));
        jFoget.setForeground(new java.awt.Color(255, 0, 51));
        jFoget.setText("Forgot your password");
        jFoget.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jFogetMouseClicked(evt);
            }
        });
        getContentPane().add(jFoget, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 266, -1, 20));
        getContentPane().add(txtTenDangNhap, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 120, 285, 35));

        txtMatKhau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMatKhauActionPerformed(evt);
            }
        });
        getContentPane().add(txtMatKhau, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 200, 285, 35));

        checkRemember.setText("Remember me");
        getContentPane().add(checkRemember, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 260, 120, 30));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/quanlykhachsan/img/backGround_TachNEn.png"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 30, -1, -1));

        jLabel7.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
        jLabel7.setText("PBLD tự tin là khách sạn mang đến sự kết ");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 470, 359, 28));

        jLabel8.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
        jLabel8.setText("hợp hoàn hảo giữa tiện nghi hiện đại, dịch");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 470, 359, 28));

        jLabel9.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
        jLabel9.setText("vụ chuyên nghiệp và không gian nghỉ dưỡng ");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 470, 359, 28));

        jLabel10.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
        jLabel10.setText("lý tưởng, đáp ứng mọi nhu cầu của quý khách ");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 510, 359, 28));

        jLabel11.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
        jLabel11.setText("từ A đến Z !!!");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 510, -1, 28));

        jLabel5.setFont(new java.awt.Font("Arial", 2, 18)); // NOI18N
        jLabel5.setText("Có PBLD đây !!!");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 190, -1, -1));

        jLabel6.setFont(new java.awt.Font("Arial", 2, 18)); // NOI18N
        jLabel6.setText("Đặt phòng ngây");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 150, -1, -1));

        jLabel12.setBackground(new java.awt.Color(0, 0, 0));
        jLabel12.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel12.setText("Tên đăng nhập");
        jLabel12.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(255, 250, 230), new java.awt.Color(204, 255, 255), new java.awt.Color(26, 26, 26), new java.awt.Color(51, 77, 51)));
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, -1, -1));

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Broadway", 1, 36)); // NOI18N
        jLabel1.setText("LOGIN");
        jLabel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(255, 250, 230), new java.awt.Color(204, 255, 255), new java.awt.Color(26, 26, 26), new java.awt.Color(51, 77, 51)));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 40, 140, 50));

        jLabel3.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/quanlykhachsan/img/backgroun5.jpg"))); // NOI18N
        jLabel3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLabel3.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jLabel3.setVerifyInputWhenFocusTarget(false);
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -30, 1030, 650));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDangNhapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDangNhapActionPerformed
        // Lấy thông tin người dùng từ các trường nhập
        // Lấy thông tin người dùng từ các trường nhập
        String user = txtTenDangNhap.getText();
        String pass = new String(txtMatKhau.getPassword()); // Lấy mật khẩu

        // Mã hóa mật khẩu
        String hashedPass = hashPassword(pass);
        updateDefaultPassword();
        System.out.print(hashedPass);
        try {
            // Kết nối đến cơ sở dữ liệu
            ConnectDB.getInstance().connect();
            Connection con = ConnectDB.getInstance().getConnection();

            // SQL để kiểm tra thông tin đăng nhập
            String sql = "SELECT * FROM TaiKhoan t JOIN NhanVien nv ON nv.maNhanVien = t.maNhanVien WHERE soDienThoai = ? AND matKhau = ?";
            PreparedStatement pstmt = con.prepareStatement(sql);
            pstmt.setString(1, user);
            pstmt.setString(2, hashedPass); // Sử dụng mật khẩu đã mã hóa

            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                JOptionPane.showMessageDialog(null, "Đăng nhập thành công!");
                updateTrangThai("DANG_HOAT_DONG", user);
                dispose();
                TrangChu_GUI gd = new TrangChu_GUI(user);

                try {
                    UIManager.setLookAndFeel(new FlatLightLaf());
                } catch (Exception e) {
                    System.err.println("Failed to initialize Look and Feel");
                }

                gd.setVisible(true);
                gd.setSize(1600, 800);
                gd.pack();
                gd.addWindowListener(new WindowAdapter() {
                    @Override
                    public void windowClosing(WindowEvent e) {
                        try {
                            updateTrangThai("KHONG_HOAT_DONG", user);
                        } catch (SQLException ex) {
                            ex.printStackTrace();
                        }
                        System.exit(0);
                    }
                });
            } else {
                JOptionPane.showMessageDialog(null, "Tên đăng nhập hoặc mật khẩu không chính xác.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Lỗi khi kết nối đến cơ sở dữ liệu: " + e.getMessage());
        }
    }//GEN-LAST:event_btnDangNhapActionPerformed

    private void jFogetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jFogetMouseClicked
       String input = JOptionPane.showInputDialog("Nhập số điện thoại hoặc email của bạn:");

        // Kiểm tra xem người dùng nhập số điện thoại hay email
        if (input != null && !input.isEmpty()) {
            if (isValidEmail(input)) {
                // Kiểm tra email trong cơ sở dữ liệu
                if (checkEmailInDatabase(input)) 
                        JOptionPane.showMessageDialog(null, "Mật khẩu đã được gửi về email của bản");                    
                   else
                    JOptionPane.showMessageDialog(null, "Email không tồn tại trong hệ thống.");
                
            }else if (isValidPhoneNumber(input)) {
                // Kiểm tra số điện thoại trong cơ sở dữ liệu
                if (checkPhoneNumberInDatabase(input)) {
                   
                        JOptionPane.showMessageDialog(null, "Mật khẩu đã được gửi về sdt của bạn");
         
                    
                } else {
                    JOptionPane.showMessageDialog(null, "Số điện thoại không tồn tại trong hệ thống.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Số điện thoại hoặc email không hợp lệ.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Bạn cần nhập thông tin.");
        }
    
    
    
    }//GEN-LAST:event_jFogetMouseClicked

    private void txtMatKhauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMatKhauActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMatKhauActionPerformed
    
     // Kiểm tra định dạng email
    private boolean isValidEmail(String email) {
        String emailRegex = "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$";
        return email.matches(emailRegex);
    }

    // Kiểm tra định dạng số điện thoại
    private boolean isValidPhoneNumber(String phoneNumber) {
        String phoneRegex = "^0[0-9]{9}$";  // Giới hạn cho số điện thoại Việt Nam
        return phoneNumber.matches(phoneRegex);
    }

    // Kiểm tra email trong cơ sở dữ liệu
    private boolean checkEmailInDatabase(String email) {
       Connection  con = ConnectDB.getInstance().getConnection();
        String sql = "SELECT * FROM NhanVien WHERE email = ?";
        try (PreparedStatement stmt = con.prepareStatement(sql)) {
            stmt.setString(1, email);
            ResultSet rs = stmt.executeQuery();
            return rs.next();  // Kiểm tra xem có kết quả trả về không (email tồn tại)
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
  

    // Kiểm tra số điện thoại trong cơ sở dữ liệu
    private boolean checkPhoneNumberInDatabase(String phoneNumber) {
        Connection con = ConnectDB.getInstance().getConnection();
        String sql = "SELECT * FROM NhanVien WHERE soDienThoai = ?";
        try (PreparedStatement stmt = con.prepareStatement(sql)) {
            stmt.setString(1, phoneNumber);
            ResultSet rs = stmt.executeQuery();
            return rs.next();  // Kiểm tra xem có kết quả trả về không (số điện thoại tồn tại)
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    // Kiểm tra tài khoản liên kết với nhân viên (nếu số điện thoại/email hợp lệ)
    private boolean checkAccountInDatabase(String identifier) {
       Connection  con = ConnectDB.getInstance().getConnection();
        String sql = "SELECT * FROM TaiKhoan WHERE maNhanVien = (SELECT maNhanVien FROM NhanVien WHERE soDienThoai = ? OR email = ?)";
        try (PreparedStatement stmt = con.prepareStatement(sql)) {
            stmt.setString(1, identifier);
            stmt.setString(2, identifier);
            ResultSet rs = stmt.executeQuery();
            return rs.next();  // Kiểm tra nếu có tài khoản liên kết với nhân viên
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    /**
     * @param args the command line arguments
     */
    public void updateTrangThai(String trangThai, String user) throws SQLException {
    Connection con = null;
    PreparedStatement pstmt = null;

    try {
        // Kết nối đến cơ sở dữ liệu
        con = ConnectDB.getInstance().getConnection();

        // Chuẩn bị câu lệnh SQL để cập nhật trạng thái
        String query = "UPDATE TaiKhoan SET trangThai = ? WHERE maNhanVien = (SELECT maNhanVien FROM NhanVien WHERE soDienThoai = ?)";
        pstmt = con.prepareStatement(query);
        pstmt.setString(1, trangThai); // Cập nhật trạng thái
        pstmt.setString(2, user);       // Tên đăng nhập

        // Thực thi câu lệnh cập nhật
        int rowsUpdated = pstmt.executeUpdate();
        
        // Kiểm tra nếu có dòng nào được cập nhật
        if (rowsUpdated > 0) {
            System.out.println("Trạng thái tài khoản đã được cập nhật thành công.");
        } else {
            System.out.println("Không tìm thấy tài khoản để cập nhật trạng thái.");
        }
    } catch (SQLException e) {
        e.printStackTrace();
        throw new SQLException("Lỗi khi cập nhật trạng thái tài khoản: " + e.getMessage());
    } finally {
        // Đóng kết nối và các tài nguyên
        if (pstmt != null) {
            pstmt.close();
        }
        if (con != null) {
            con.close();
        }
    }
}
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DangNhap_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DangNhap_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DangNhap_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DangNhap_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DangNhap_GUI().setVisible(true);
            }
        });
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDangNhap;
    private javax.swing.JCheckBox checkRemember;
    private javax.swing.JLabel jFoget;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPasswordField txtMatKhau;
    private javax.swing.JTextField txtTenDangNhap;
    // End of variables declaration//GEN-END:variables
}
